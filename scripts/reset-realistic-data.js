#!/usr/bin/env node

/**
 * Script pour nettoyer les anciennes donn√©es et r√©g√©n√©rer des montants r√©alistes
 * Usage: node scripts/reset-realistic-data.js
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function resetData() {
  console.log('üßπ Nettoyage des anciennes donn√©es...\n');
  
  try {
    // Supprimer les donn√©es de services avec des montants irr√©alistes
    const { data: oldData, error: selectError } = await supabase
      .from('gcp_services_usage')
      .select('*');
    
    if (selectError) {
      console.error('‚ùå Erreur lors de la lecture:', selectError.message);
      return;
    }
    
    console.log(`üìä Trouv√© ${oldData.length} enregistrements`);
    
    // Analyser les montants actuels
    const totalCost = oldData.reduce((sum, item) => sum + parseFloat(item.cost_amount || 0), 0);
    console.log(`üí∞ Co√ªt total actuel: $${totalCost.toFixed(2)}`);
    
    if (totalCost > 1000) {
      console.log('‚ö†Ô∏è Montants trop √©lev√©s d√©tect√©s - nettoyage n√©cessaire');
      
      // Supprimer les donn√©es existantes
      const { error: deleteError } = await supabase
        .from('gcp_services_usage')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000'); // Supprimer tout
      
      if (deleteError) {
        console.error('‚ùå Erreur lors de la suppression:', deleteError.message);
        return;
      }
      
      console.log('‚úÖ Anciennes donn√©es supprim√©es');
      
      // Supprimer aussi les recommandations bas√©es sur les anciens montants
      await supabase
        .from('gcp_optimization_recommendations')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000');
      
      console.log('‚úÖ Anciennes recommandations supprim√©es');
      
      // R√©initialiser le projet
      await supabase
        .from('gcp_projects')
        .update({
          current_month_cost: 0,
          carbon_footprint_kg: 0,
          cost_optimization_potential: 0,
          optimization_recommendations: [],
          sync_status: 'pending'
        })
        .eq('project_id', 'carewash-v3');
      
      console.log('‚úÖ Projet r√©initialis√©');
      
    } else {
      console.log('‚úÖ Les montants semblent d√©j√† r√©alistes');
    }
    
    console.log('\nüéØ Prochaines √©tapes:');
    console.log('1. Relancez la synchronisation depuis le wizard GCP');
    console.log('2. Les nouveaux montants devraient √™tre plus r√©alistes ($50-200/mois)');
    console.log('3. V√©rifiez avec: node scripts/show-kpis.js');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error);
  }
}

async function showCurrentTotals() {
  console.log('üìä MONTANTS ACTUELS\n' + '='.repeat(40));
  
  const { data: services } = await supabase
    .from('gcp_services_usage')
    .select('cost_amount, carbon_footprint_grams, service_category');
  
  if (!services || services.length === 0) {
    console.log('üì≠ Aucune donn√©e trouv√©e');
    return;
  }
  
  const totalCost = services.reduce((sum, item) => sum + parseFloat(item.cost_amount || 0), 0);
  const totalCarbon = services.reduce((sum, item) => sum + parseFloat(item.carbon_footprint_grams || 0), 0);
  
  console.log(`üí∞ Co√ªt total: $${totalCost.toFixed(2)}`);
  console.log(`üå± Carbone total: ${(totalCarbon / 1000).toFixed(2)} kg CO2`);
  console.log(`üìä Nombre de services: ${services.length}`);
  
  // Grouper par cat√©gorie
  const byCategory = services.reduce((acc, service) => {
    const cat = service.service_category || 'other';
    if (!acc[cat]) acc[cat] = { cost: 0, count: 0 };
    acc[cat].cost += parseFloat(service.cost_amount || 0);
    acc[cat].count += 1;
    return acc;
  }, {});
  
  console.log('\nüì¶ Par cat√©gorie:');
  for (const [category, totals] of Object.entries(byCategory)) {
    console.log(`   ${category}: $${totals.cost.toFixed(2)} (${totals.count} services)`);
  }
  
  if (totalCost > 500) {
    console.log('\n‚ö†Ô∏è ATTENTION: Montants trop √©lev√©s pour un projet de d√©veloppement');
    console.log('üí° Recommandation: Ex√©cutez le nettoyage avec --clean');
  } else if (totalCost < 10) {
    console.log('\n‚úÖ Montants r√©alistes pour un projet de d√©veloppement');
  } else {
    console.log('\nüìà Montants dans une fourchette acceptable');
  }
}

async function main() {
  const shouldClean = process.argv.includes('--clean');
  
  if (shouldClean) {
    await resetData();
  } else {
    await showCurrentTotals();
    console.log('\nüí° Pour nettoyer les donn√©es: node scripts/reset-realistic-data.js --clean');
  }
}

main().catch(console.error);
