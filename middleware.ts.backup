import { createServerClient } from '@supabase/ssr'
import { NextRequest, NextResponse } from 'next/server'

export async function middleware(request: NextRequest) {
  // Create an unmodified response
  let response = NextResponse.next({
    request: {
      headers: request.headers,
    },
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return request.cookies.get(name)?.value
        },
        set(name: string, value: string, options: any) {
          // If the cookie is updated, update the cookies for the request and response
          request.cookies.set({
            name,
            value,
            ...options,
          })
          response = NextResponse.next({
            request: {
              headers: request.headers,
            },
          })
          response.cookies.set({
            name,
            value,
            ...options,
          })
        },
        remove(name: string, options: any) {
          // If the cookie is removed, update the cookies for the request and response
          request.cookies.set({
            name,
            value: '',
            ...options,
          })
          response = NextResponse.next({
            request: {
              headers: request.headers,
            },
          })
          response.cookies.set({
            name,
            value: '',
            ...options,
          })
        },
      },
    }
  )

  const { pathname } = request.nextUrl

  // Allow access to public paths
  const publicPaths = [
    '/_next',
    '/api',
    '/static',
    '/favicon.ico',
    '/favicon.svg',
    '/login',
    '/signup',
    '/forgot-password',
    '/reset-password',
    '/auth',
    '/auth-success',
  ]

  const isPublicPath = publicPaths.some(path => pathname.startsWith(path))
  const isRootPath = pathname === '/'

  if (isPublicPath || isRootPath) {
    return response
  }

  // Check if we have a session
  const {
    data: { session },
    error,
  } = await supabase.auth.getSession()

  // Debug logs
  console.log('üîç Middleware - Path:', pathname)
  console.log('üîç Middleware - Session:', session?.user?.email || 'no session')

  // Si on vient juste de faire une authentification, attendre un peu plus
  const isFromLogin = request.headers.get('referer')?.includes('/login')
  if (isFromLogin && !session && pathname.startsWith('/dashboard')) {
    console.log('‚è≥ Middleware - Coming from login, giving more time for session sync...')
    // Attendre un peu plus longtemps pour la synchronisation
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    // Re-v√©rifier la session apr√®s le d√©lai
    const { data: { session: retrySession } } = await supabase.auth.getSession()
    if (retrySession) {
      console.log('‚úÖ Middleware - Session found after retry:', retrySession.user?.email)
      return response // Laisser passer
    }
  }

  // If accessing protected routes without session, redirect to login
  if (!session && pathname.startsWith('/dashboard')) {
    console.log('‚ùå Middleware - No session, redirecting to login')
    const redirectUrl = new URL('/login', request.url)
    redirectUrl.searchParams.set('redirectTo', pathname)
    return NextResponse.redirect(redirectUrl)
  }

  // If authenticated and trying to access auth pages, redirect to dashboard
  if (session && ['/login', '/signup', '/forgot-password'].includes(pathname)) {
    return NextResponse.redirect(new URL('/dashboard/default', request.url))
  }

  // If accessing root and authenticated, redirect to dashboard
  if (session && pathname === '/') {
    return NextResponse.redirect(new URL('/dashboard/default', request.url))
  }

  return response
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     */
    '/((?!_next/static|_next/image|favicon.ico|public|.*\\.png$|.*\\.jpg$|.*\\.jpeg$|.*\\.gif$|.*\\.svg$).*)',
  ],
}
